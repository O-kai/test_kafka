serviceIp: 124.223.45.223
kafkaPort: 9092

server:
  port: 9999
spring:
  kafka:
    #    bootstrap-servers: ${serviceIp}:${kafkaPort}
    #    bootstrap-servers: 192.168.211.130:9092,192.168.211.130:9093,192.168.211.130:9094
    producer: # producer 生产者
      bootstrap-servers: ${serviceIp}:${kafkaPort}
      client-id: jsk_producer_01
      retries: 0 # 重试次数
      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      #      compression-type: lz4
      # 用来控制batch最大的空闲时间
      #      lingerMs: 100
      # 同一个连接，最多允许有多少条消息在发送中（未得到确认），超过1的情况下，如果失败重试，则可能乱序
    #      maxInFlight: 5
    consumer: # consumer消费者
      bootstrap-servers: ${serviceIp}:${kafkaPort}
      client-id: jsk_consumer_01
      group-id: mentugroup # 默认的消费组ID
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)
      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer